// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mdx from "./common/Mdx.mjs";
import * as Meta from "./components/Meta.mjs";
import * as Next from "./bindings/Next.mjs";
import * as $$Text from "./components/Text.mjs";
import * as Util from "./common/Util.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./components/Button.mjs";
import * as Footer from "./components/Footer.mjs";
import * as BlogApi from "./common/BlogApi.mjs";
import * as DateStr from "./common/DateStr.mjs";
import * as Markdown from "./components/Markdown.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Navigation from "./components/Navigation.mjs";
import * as ProcessEnv from "./common/ProcessEnv.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as BlogFrontmatter from "./common/BlogFrontmatter.mjs";
import * as NameInitialsAvatar from "./components/NameInitialsAvatar.mjs";

var defaultPreviewImg = "https://res.cloudinary.com/dmm9n7v9f/image/upload/v1598616442/Reason%20Association/rescript-lang.org/Art-3-rescript-launch_ovoibg.jpg";

var middleDotSpacer = " " + (String.fromCharCode(183) + " ");

function Blog$Badge(Props) {
  var badge = Props.badge;
  var bgColor = badge !== 1 ? "bg-turtle" : "bg-orange";
  var text = BlogFrontmatter.Badge.toString(badge);
  return React.createElement("div", {
              className: bgColor + " flex items-center h-6 font-medium tracking-tight text-gray-80-tr text-14 px-2 rounded-sm"
            }, React.createElement("div", undefined, React.createElement("img", {
                      className: "h-3 block mr-1",
                      src: "/static/star.svg"
                    })), React.createElement("div", undefined, text));
}

function Blog$CategorySelector(Props) {
  var selected = Props.selected;
  var onSelected = Props.onSelected;
  var tabs = [
    /* All */0,
    /* Archived */1
  ];
  return React.createElement("div", {
              className: "text-16 w-full flex items-center justify-between text-gray-60"
            }, Belt_Array.map(tabs, (function (tab) {
                    var onClick = function (evt) {
                      evt.preventDefault();
                      return Curry._1(onSelected, tab);
                    };
                    var isActive = selected === tab;
                    var text = tab ? "Archived" : "All";
                    return React.createElement("div", {
                                key: text,
                                className: (
                                  isActive ? "bg-gray-10 text-gray-80 rounded py-1" : "hover:cursor-pointer hover:text-gray-80"
                                ) + "  px-4 inline-block",
                                onClick: onClick
                              }, text);
                  })));
}

function Blog$BlogCard(Props) {
  var previewImg = Props.previewImg;
  var titleOpt = Props.title;
  var category = Props.category;
  var badge = Props.badge;
  var date = Props.date;
  var slug = Props.slug;
  var title = titleOpt !== undefined ? titleOpt : "Unknown Title";
  var className = "absolute top-0 h-full w-full object-cover";
  return React.createElement("section", {
              className: "h-full"
            }, React.createElement("div", {
                  className: "relative"
                }, badge !== undefined ? React.createElement("div", {
                        className: "absolute z-10 bottom-0 mb-4 -ml-2"
                      }, React.createElement(Blog$Badge, {
                            badge: badge
                          })) : null, React.createElement(Next.Link.make, {
                      href: "/blog/[slug]",
                      as: "/blog/" + slug,
                      children: React.createElement("a", {
                            className: "relative block mb-4 pt-9/16"
                          }, previewImg !== undefined ? React.createElement("img", {
                                  className: className,
                                  src: previewImg
                                }) : React.createElement("img", {
                                  className: className,
                                  src: defaultPreviewImg
                                }))
                    })), React.createElement("div", {
                  className: "px-2"
                }, React.createElement(Next.Link.make, {
                      href: "/blog/[slug]",
                      as: "/blog/" + slug,
                      children: React.createElement("a", undefined, React.createElement("h2", {
                                className: $$Text.H3.$$default
                              }, title))
                    }), React.createElement("div", {
                      className: "text-gray-60 text-14"
                    }, category !== undefined ? React.createElement(React.Fragment, undefined, category, " Â· ") : null, Util.$$Date.toDayMonthYear(date))));
}

function Blog$FeatureCard(Props) {
  var previewImg = Props.previewImg;
  var titleOpt = Props.title;
  var author = Props.author;
  var badge = Props.badge;
  var date = Props.date;
  var category = Props.category;
  var firstParagraphOpt = Props.firstParagraph;
  var slug = Props.slug;
  var title = titleOpt !== undefined ? titleOpt : "Unknown Title";
  var firstParagraph = firstParagraphOpt !== undefined ? firstParagraphOpt : "";
  var displayName = BlogFrontmatter.Author.getDisplayName(author);
  var src = author.imgUrl;
  var authorImg = src !== null ? React.createElement("img", {
          className: "h-full w-full rounded-full",
          src: src
        }) : React.createElement(NameInitialsAvatar.make, {
          displayName: displayName
        });
  var className = "absolute top-0 h-full w-full object-cover";
  var handle = author.twitter;
  return React.createElement("section", {
              className: "flex sm:px-4 md:px-8 lg:px-0 flex-col justify-end lg:flex-row sm:items-center h-full"
            }, React.createElement("div", {
                  className: "w-full h-full sm:self-start md:self-auto",
                  style: {
                    maxHeight: "25.4375rem"
                  }
                }, React.createElement(Next.Link.make, {
                      href: "/blog/[slug]",
                      as: "/blog/" + slug,
                      children: React.createElement("a", {
                            className: "relative block pt-2/3"
                          }, badge !== undefined ? React.createElement("div", {
                                  className: "absolute z-10 top-0 mt-10 ml-4 lg:-ml-4"
                                }, React.createElement(Blog$Badge, {
                                      badge: badge
                                    })) : null, previewImg !== undefined ? React.createElement("img", {
                                  className: className,
                                  src: previewImg
                                }) : React.createElement("img", {
                                  className: className,
                                  src: defaultPreviewImg
                                }))
                    })), React.createElement("div", {
                  className: "relative px-4 lg:self-auto sm:pt-12 md:px-20 sm:self-start md:-mt-20 mt-4 bg-white lg:w-full lg:pt-0 lg:mt-0 lg:px-0 lg:ml-12"
                }, React.createElement("div", {
                      className: "max-w-400 "
                    }, React.createElement("h2", {
                          className: $$Text.H2.$$default
                        }, title), React.createElement("div", {
                          className: "mb-6"
                        }, React.createElement("div", {
                              className: "flex items-center font-medium text-gray-40 text-sm mt-2 mb-5"
                            }, React.createElement("div", {
                                  className: "inline-block w-4 h-4 mr-2"
                                }, authorImg), React.createElement("div", undefined, handle !== null ? React.createElement("a", {
                                        className: "hover:text-gray-80",
                                        href: "https://twitter.com/" + handle,
                                        rel: "noopener noreferrer",
                                        target: "_blank"
                                      }, displayName) : displayName, category !== undefined ? React.createElement(React.Fragment, undefined, middleDotSpacer, category, middleDotSpacer) : middleDotSpacer, Util.$$Date.toDayMonthYear(date))), React.createElement("p", {
                              className: "text-gray-90 antialiased tracking-tight text-16"
                            }, firstParagraph))), React.createElement(Next.Link.make, {
                      href: "/blog/[slug]",
                      as: "/blog/" + slug,
                      children: React.createElement("a", undefined, React.createElement(Button.make, {
                                children: "Read Article"
                              }))
                    })));
}

function orderByDate(posts) {
  return posts.slice().sort(function (a, b) {
              var aV = DateStr.toDate(a.frontmatter.date).valueOf();
              var bV = DateStr.toDate(b.frontmatter.date).valueOf();
              if (aV === bV) {
                return 0;
              } else if (aV > bV) {
                return -1;
              } else {
                return 1;
              }
            });
}

var Malformed = {};

function $$default(props) {
  var malformed = props.malformed;
  var posts = props.posts;
  var match = React.useState(function () {
        return /* All */0;
      });
  var setSelection = match[1];
  var currentSelection = match[0];
  var errorBox = ProcessEnv.env === ProcessEnv.development && malformed.length !== 0 ? React.createElement("div", {
          className: "mb-12"
        }, React.createElement(Markdown.Warn.make, {
              children: null
            }, React.createElement("h2", {
                  className: "font-bold text-gray-95 text-32 mb-2"
                }, "Some Blog Posts are Malformed!"), React.createElement("p", undefined, "Any blog post with invalid data will not be displayed in production."), React.createElement("div", undefined, React.createElement("p", {
                      className: "font-bold mt-4"
                    }, "Errors:"), React.createElement("ul", undefined, Belt_Array.mapWithIndex(malformed, (function (i, m) {
                            return React.createElement("li", {
                                        key: String(i),
                                        className: "list-disc ml-5"
                                      }, "pages/blog/" + (m.id + (".mdx: " + m.message)));
                          })))))) : null;
  var content;
  if (posts.length === 0) {
    content = React.createElement("div", {
          className: "mt-8"
        }, React.createElement(Markdown.H1.make, {
              children: "Blog not yet available"
            }), React.createElement(Markdown.Warn.make, {
              children: "This blog is currently in the works."
            }));
  } else {
    var filtered = currentSelection ? props.archived : posts;
    var match$1 = filtered.length;
    var result;
    if (match$1 !== 0) {
      var first = Belt_Array.getExn(filtered, 0);
      var rest = filtered.slice(1);
      var tmp = {
        title: first.frontmatter.title,
        author: first.frontmatter.author,
        date: DateStr.toDate(first.frontmatter.date),
        slug: first.id
      };
      var tmp$1 = Caml_option.null_to_opt(first.frontmatter.previewImg);
      if (tmp$1 !== undefined) {
        tmp.previewImg = tmp$1;
      }
      var tmp$2 = Caml_option.null_to_opt(first.frontmatter.badge);
      if (tmp$2 !== undefined) {
        tmp.badge = Caml_option.valFromOption(tmp$2);
      }
      var tmp$3 = Caml_option.null_to_opt(first.frontmatter.description);
      if (tmp$3 !== undefined) {
        tmp.firstParagraph = tmp$3;
      }
      var featureBox = React.createElement("div", {
            className: "w-full mb-24 lg:px-8 xl:px-0"
          }, React.createElement(Blog$FeatureCard, tmp));
      var postsBox = rest.length !== 0 ? React.createElement("div", {
              className: "px-4 md:px-8 xl:px-0 grid grid-cols-1 xs:grid-cols-2 md:grid-cols-3 gap-20 row-gap-12 md:row-gap-24 w-full"
            }, Belt_Array.mapWithIndex(rest, (function (i, post) {
                    var badge = post.frontmatter.badge;
                    var tmp = {
                      title: post.frontmatter.title,
                      author: post.frontmatter.author,
                      date: DateStr.toDate(post.frontmatter.date),
                      slug: post.id,
                      key: post.id + String(i)
                    };
                    var tmp$1 = Caml_option.null_to_opt(post.frontmatter.previewImg);
                    if (tmp$1 !== undefined) {
                      tmp.previewImg = tmp$1;
                    }
                    var tmp$2 = badge === null ? undefined : Caml_option.some(badge);
                    if (tmp$2 !== undefined) {
                      tmp.badge = Caml_option.valFromOption(tmp$2);
                    }
                    return React.createElement(Blog$BlogCard, tmp);
                  }))) : null;
      result = React.createElement(React.Fragment, undefined, featureBox, postsBox);
    } else {
      result = React.createElement("div", undefined, "No posts for this category available...");
    }
    content = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "hidden sm:flex justify-center "
            }, React.createElement("div", {
                  className: "my-16 w-full",
                  style: {
                    maxWidth: "12rem"
                  }
                }, React.createElement(Blog$CategorySelector, {
                      selected: currentSelection,
                      onSelected: (function (selection) {
                          return Curry._1(setSelection, (function (param) {
                                        return selection;
                                      }));
                        })
                    }))), result);
  }
  var overlayState = React.useState(function () {
        return false;
      });
  return React.createElement(React.Fragment, undefined, React.createElement(Meta.make, {
                  description: "News, Announcements, Release Notes and more",
                  title: "Blog | ReScript Documentation"
                }), React.createElement("div", {
                  className: "mt-16 pt-2"
                }, React.createElement("div", {
                      className: "text-gray-80 text-lg"
                    }, React.createElement(Navigation.make, {
                          overlayState: overlayState
                        }), React.createElement("div", {
                          className: "flex justify-center overflow-hidden"
                        }, React.createElement("main", {
                              className: "min-w-320 lg:align-center w-full lg:px-0 max-w-1280 pb-48"
                            }, React.createElement(Mdx.Provider.make, {
                                  components: Markdown.$$default,
                                  children: React.createElement("div", {
                                        className: "flex justify-center"
                                      }, React.createElement("div", {
                                            className: "w-full",
                                            style: {
                                              maxWidth: "66.625rem"
                                            }
                                          }, errorBox, content))
                                }))), React.createElement(Footer.make, {}))));
}

function getStaticProps(_ctx) {
  var authors = BlogFrontmatter.Author.getAllAuthors(undefined);
  var match = Belt_Array.reduce(BlogApi.getAllPosts(undefined), [
        [],
        [],
        []
      ], (function (acc, postData) {
          var archived = acc[2];
          var malformed = acc[1];
          var posts = acc[0];
          var id = postData.slug;
          var decoded = BlogFrontmatter.decode(authors, postData.frontmatter);
          if (decoded.TAG === /* Ok */0) {
            var frontmatter = decoded._0;
            if (postData.archived) {
              archived.push({
                    id: id,
                    frontmatter: frontmatter
                  });
            } else {
              posts.push({
                    id: id,
                    frontmatter: frontmatter
                  });
            }
            return [
                    posts,
                    malformed,
                    archived
                  ];
          }
          var m_message = decoded._0;
          var m = {
            id: id,
            message: m_message
          };
          var malformed$1 = Belt_Array.concat(malformed, [m]);
          return [
                  posts,
                  malformed$1,
                  archived
                ];
        }));
  var props_posts = orderByDate(match[0]);
  var props_archived = orderByDate(match[2]);
  var props_malformed = match[1];
  var props = {
    posts: props_posts,
    archived: props_archived,
    malformed: props_malformed
  };
  return Promise.resolve({
              props: props
            });
}

var Post = {};

export {
  Post ,
  Malformed ,
  defaultPreviewImg ,
  $$default ,
  $$default as default,
  getStaticProps ,
  
}
/* middleDotSpacer Not a pure module */
