// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as React from "@mdx-js/react";

var getMdxType = (element => {
      if(element == null || element.props == null) {
        return 'unknown';
      }
      return element.props.mdxType;
    });

var getMdxClassName = (element => {
      if(element == null || element.props == null) {
        return;
      }
      return element.props.className;
    });

function classify(v) {
  if ((function (a) { return  a instanceof Array})(v)) {
    return {
            TAG: 2,
            _0: v,
            [Symbol.for("name")]: "Array"
          };
  } else if (typeof v === "string") {
    return {
            TAG: 0,
            _0: v,
            [Symbol.for("name")]: "String"
          };
  } else if (typeof v === "object") {
    return {
            TAG: 1,
            _0: v,
            [Symbol.for("name")]: "Element"
          };
  } else {
    return {
            TAG: 3,
            _0: v,
            [Symbol.for("name")]: "Unknown"
          };
  }
}

var getMdxChildren = (element => {
      if(typeof element === 'string') {
        return element;
      }
      if(element == null || element.props == null || element.props.children == null) {
        return;
      }
      return element.props.children;
    });

function flatten(_mdxComp) {
  while(true) {
    var mdxComp = _mdxComp;
    var str = classify(getMdxChildren(mdxComp));
    switch (str.TAG | 0) {
      case /* String */0 :
          return [str._0];
      case /* Element */1 :
          _mdxComp = str._0;
          continue ;
      case /* Array */2 :
          return Belt_Array.reduce(str._0, [], (function (acc, next) {
                        return Belt_Array.concat(acc, flatten(next));
                      }));
      case /* Unknown */3 :
          return [];
      
    }
  };
}

function arrToReactElement(prim) {
  return prim;
}

function fromReactElement(prim) {
  return prim;
}

function MdxChildren_toReactElement(prim) {
  return prim;
}

var MdxChildren = {
  classify: classify,
  getMdxChildren: getMdxChildren,
  flatten: flatten,
  toReactElement: MdxChildren_toReactElement
};

var Components = {
  t: (function (prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9, prim$10, prim$11, prim$12, prim$13, prim$14, prim$15, prim$16, prim$17, prim$18, prim$19, prim$20, prim$21, prim$22, prim$23, prim$24, prim$25, prim$26) {
      var tmp = {};
      if (prim !== undefined) {
        tmp.Cite = Caml_option.valFromOption(prim);
      }
      if (prim$1 !== undefined) {
        tmp.Info = Caml_option.valFromOption(prim$1);
      }
      if (prim$2 !== undefined) {
        tmp.Warn = Caml_option.valFromOption(prim$2);
      }
      if (prim$3 !== undefined) {
        tmp.Intro = Caml_option.valFromOption(prim$3);
      }
      if (prim$4 !== undefined) {
        tmp.UrlBox = Caml_option.valFromOption(prim$4);
      }
      if (prim$5 !== undefined) {
        tmp.CodeTab = Caml_option.valFromOption(prim$5);
      }
      if (prim$6 !== undefined) {
        tmp.p = Caml_option.valFromOption(prim$6);
      }
      if (prim$7 !== undefined) {
        tmp.li = Caml_option.valFromOption(prim$7);
      }
      if (prim$8 !== undefined) {
        tmp.h1 = Caml_option.valFromOption(prim$8);
      }
      if (prim$9 !== undefined) {
        tmp.h2 = Caml_option.valFromOption(prim$9);
      }
      if (prim$10 !== undefined) {
        tmp.h3 = Caml_option.valFromOption(prim$10);
      }
      if (prim$11 !== undefined) {
        tmp.h4 = Caml_option.valFromOption(prim$11);
      }
      if (prim$12 !== undefined) {
        tmp.h5 = Caml_option.valFromOption(prim$12);
      }
      if (prim$13 !== undefined) {
        tmp.ul = Caml_option.valFromOption(prim$13);
      }
      if (prim$14 !== undefined) {
        tmp.ol = Caml_option.valFromOption(prim$14);
      }
      if (prim$15 !== undefined) {
        tmp.table = Caml_option.valFromOption(prim$15);
      }
      if (prim$16 !== undefined) {
        tmp.thead = Caml_option.valFromOption(prim$16);
      }
      if (prim$17 !== undefined) {
        tmp.th = Caml_option.valFromOption(prim$17);
      }
      if (prim$18 !== undefined) {
        tmp.td = Caml_option.valFromOption(prim$18);
      }
      if (prim$19 !== undefined) {
        tmp.blockquote = Caml_option.valFromOption(prim$19);
      }
      if (prim$20 !== undefined) {
        tmp.inlineCode = Caml_option.valFromOption(prim$20);
      }
      if (prim$21 !== undefined) {
        tmp.strong = Caml_option.valFromOption(prim$21);
      }
      if (prim$22 !== undefined) {
        tmp.hr = Caml_option.valFromOption(prim$22);
      }
      if (prim$23 !== undefined) {
        tmp.code = Caml_option.valFromOption(prim$23);
      }
      if (prim$24 !== undefined) {
        tmp.pre = Caml_option.valFromOption(prim$24);
      }
      if (prim$25 !== undefined) {
        tmp.a = Caml_option.valFromOption(prim$25);
      }
      return tmp;
    })
};

var Provider = {
  make: React.MDXProvider
};

export {
  arrToReactElement ,
  getMdxType ,
  getMdxClassName ,
  fromReactElement ,
  MdxChildren ,
  Components ,
  Provider ,
  
}
/* Provider Not a pure module */
