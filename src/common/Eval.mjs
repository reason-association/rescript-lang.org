// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$Worker from "../bindings/Worker.mjs";

function make(param) {
  return $$Worker.make("./EvalWorker.mjs");
}

var Config = {
  make: make
};

var EvalWorker = $$Worker.Make(Config);

var worker = Curry._1(EvalWorker.make, undefined);

var eventListeners = {
  contents: []
};

Curry._2(EvalWorker.App.onMessage, worker, (function (msg) {
        eventListeners.contents.forEach(function (listener) {
              return Curry._1(listener, msg);
            });
        
      }));

function addEventListener(listener) {
  eventListeners.contents.push(listener);
  
}

function removeEventListener(listener) {
  eventListeners.contents = eventListeners.contents.filter(function (l) {
        return l !== listener;
      });
  
}

function workerMessageToAction(message) {
  var message$1 = message.result;
  var forCode = message.forCode;
  if (message$1.TAG === /* Ok */0) {
    return {
            TAG: 1,
            forCode: forCode,
            message: message$1._0,
            [Symbol.for("name")]: "Success"
          };
  } else {
    return {
            TAG: 2,
            forCode: forCode,
            message: message$1._0,
            [Symbol.for("name")]: "Fail"
          };
  }
}

function reducer(state, action) {
  if (typeof state === "number") {
    switch (action.TAG | 0) {
      case /* Evaluate */0 :
          return {
                  TAG: 0,
                  _0: action._0,
                  [Symbol.for("name")]: "Evaluating"
                };
      case /* Success */1 :
      case /* Fail */2 :
          return state;
      
    }
  } else {
    switch (state.TAG | 0) {
      case /* Evaluating */0 :
          var code = state._0;
          switch (action.TAG | 0) {
            case /* Evaluate */0 :
                return state;
            case /* Success */1 :
                if (action.forCode === code) {
                  return {
                          TAG: 1,
                          _0: action.message,
                          [Symbol.for("name")]: "Evaluated"
                        };
                } else {
                  return state;
                }
            case /* Fail */2 :
                if (action.forCode === code) {
                  return {
                          TAG: 2,
                          _0: action.message,
                          [Symbol.for("name")]: "Error"
                        };
                } else {
                  return state;
                }
            
          }
      case /* Evaluated */1 :
          switch (action.TAG | 0) {
            case /* Evaluate */0 :
                return {
                        TAG: 0,
                        _0: action._0,
                        [Symbol.for("name")]: "Evaluating"
                      };
            case /* Success */1 :
            case /* Fail */2 :
                return state;
            
          }
      case /* Error */2 :
          switch (action.TAG | 0) {
            case /* Evaluate */0 :
                return {
                        TAG: 0,
                        _0: action._0,
                        [Symbol.for("name")]: "Evaluating"
                      };
            case /* Success */1 :
            case /* Fail */2 :
                return state;
            
          }
      
    }
  }
}

function useEval(param) {
  var match = React.useReducer(reducer, /* Idle */0);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var listener = function (message) {
            return Curry._1(dispatch, workerMessageToAction(message.data));
          };
          addEventListener(listener);
          return (function (param) {
                    return removeEventListener(listener);
                  });
        }), []);
  React.useEffect((function () {
          if (typeof state !== "number" && state.TAG === /* Evaluating */0) {
            Curry._2(EvalWorker.App.postMessage, worker, {
                  _0: state._0,
                  [Symbol.for("name")]: "EvalMessage"
                });
          }
          
        }), [state]);
  return [
          state,
          (function (code) {
              return Curry._1(dispatch, {
                          TAG: 0,
                          _0: code,
                          [Symbol.for("name")]: "Evaluate"
                        });
            })
        ];
}

export {
  Config ,
  EvalWorker ,
  worker ,
  eventListeners ,
  addEventListener ,
  removeEventListener ,
  workerMessageToAction ,
  reducer ,
  useEval ,
  
}
/* EvalWorker Not a pure module */
